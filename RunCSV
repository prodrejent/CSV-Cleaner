# -*- coding: utf-8 -*-
"""skrypt czyszczący CSV (CorporateServerAssessment).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d1LG95kX_OTmmuoWpEfUnxouxvQk07_N
"""

# ⬇️ 1.  AUTOMATYCZNA INSTALACJA POTRZEBNYCH PAKIETÓW
!pip install --quiet pandas openpyxl

# ⬇️ 2.  CAŁY SKRYPT CZYSZCZENIA + OBSŁUGA WGRYWANIA I POBIERANIA
import re, pandas as pd, os, sys
from google.colab import files

# --- Funkcja pomocnicza: wyciąganie wersji (gdybyś jednak chciał sam numer) ---
def extract_versions(field: str, prod=False):
    if not isinstance(field, str):
        return ''
    key = r'AMProductVersion' if prod else r'AMEngineVersion'
    m = re.search(key + r'=([^;{}]+)', field)
    return m.group(1) if m else field.strip()

# --- Parser pojedynczej linii ---
_key_re = re.compile(r'(aid|hostname|gpostate|engine|product)\s*[:=]\s*', re.I)

def parse_line(line: str):
    """Zwraca dict z AID, Hostname, GPO state, engine, product."""
    matches = list(_key_re.finditer(line))
    row = {k: '' for k in ('AID', 'Hostname', 'GPO state', 'engine', 'product')}
    for i, m in enumerate(matches):
        key = m.group(1).lower()
        start_val = m.end()
        end_val = matches[i + 1].start() if i + 1 < len(matches) else len(line)
        val = line[start_val:end_val].strip().rstrip(' ,')

        if key == 'aid':
            # jeżeli AID zaczyna się klamrą {id1,id2}, weź pierwszy
            if val.startswith('{'):
                val = val.strip('{}').split(',')[0].strip()
            row['AID'] = val
        elif key == 'hostname':
            row['Hostname'] = val
        elif key == 'gpostate':
            row['GPO state'] = val.replace(' ', '')  # usuwamy spacje
        elif key == 'engine':
            row['engine'] = val         # pełny obiekt @{AMEngineVersion=...}
            # row['engine'] = extract_versions(val, prod=False)   # tylko numer
        elif key == 'product':
            row['product'] = val        # pełny obiekt @{AMProductVersion=...}
            # row['product'] = extract_versions(val, prod=True)   # tylko numer
    return row

# --- 3.  Wgrywanie surowego CSV ---
print("Wybierz swój plik CSV (np. CorporateServerAssessment.csv)…")
uploaded = files.upload()
if not uploaded:
    sys.exit("❌ Nie wczytano żadnego pliku.")

raw_file = next(iter(uploaded))
print(f"✅ Załadowano: {raw_file}")

# --- 4.  Przetwarzanie ---
records = []
with open(raw_file, encoding='utf-8', errors='ignore') as fh:
    for ln in fh:
        r = parse_line(ln)
        if r['AID']:            # ignoruj puste wiersze
            records.append(r)

df = pd.DataFrame(records, columns=['AID', 'Hostname', 'GPO state', 'engine', 'product'])

# --- 5.  Podgląd i zapis do XLSX ---
print("\nPodgląd pierwszych 5 wierszy po czyszczeniu:")
display(df.head())

out_file = os.path.splitext(raw_file)[0] + '_clean.xlsx'
df.to_excel(out_file, index=False, engine='openpyxl')
print(f"\n✅ Zapisano wynik do: {out_file}")

# --- 6.  Pobranie na komputer ---
files.download(out_file)
print("⬇️  Kliknij powyżej, aby pobrać plik na dysk.")
